import * as Tone from 'tone';
import { Modal } from '../controller/modal';

/**
 * 
 * @description Type de donn√©es pour les boutons du jeu
 */
export type button = {
    /**
     * 
     * Couleur du bouton (rouge, bleu, vert, jaune) 
     */
    color: string;
    /**
     * 
     * Fr√©quence de la note jou√©e par le bouton
     */
    tone: string;
    /**
     * 
     * Note jou√©e par le bouton
     */
    note: string;
   }

/**
 * 
 * @description Interface pour le jeu Super Simon 
 * 
 */
export interface ISuperSimon 
{
    /**
     * 
     * Objet contenant les boutons du jeu ainsi que leurs couleurs, notes et fr√©quences üîò
     */
    buttons: button[];
    /**
     * 
     * Bouton de d√©marrage du jeu üéÆ
     */
    buttonStart: string;
    /**
     * 
     * Tableau contenant la s√©quence de boutons √† cliquer [üî¥,üü¢,üîµ,üü°]
     */
    sequence: string[];
    /**
     * 
     * Tableau contenant le dernier r√©sultat de la s√©quence de boutons √† cliquer  [üü°]
     */
    lastSequence: string[];
    /**
     * 
     * Vitesse a laquelle la s√©quence de boutons est jou√©e {en millisecondes} üïë
     * @default 2500
     */
    speed: number;
    /**
     * 
     * Objet contenant le synth√©tiseur de notes üéπ
     * @see https://tonejs.github.io/docs/13.8.25/Synth
     */
    _synth: Tone.Synth;
    /**
     * 
     * Nombre de tours valid√©s üîÑÔ∏è
     */
    itteration: number; 
    /**
     * 
     * Nombre de boutons cliqu√©s üéØ
     */
    numberOfClick: number;
    /**
     * 
     * Element HTML indiquant √† qui est le tour üîÑÔ∏è
     */
    _turn: HTMLTitleElement;
    /**
     * 
     *  @description Initialise le jeu et joue la s√©quence de boutons √† cliquer (appeller de facon recursive pour rejouer la s√©quence de boutons automatiquement )
     */
    init(): void;
    /**
     * 
     * Jouer la s√©quence de boutons
     * @example
     * // Initialiser le jeu
     * this.buttonStart?.addEventListener('click', () => {
     *  this.init();
     * });
     * // ...
     * // Jouer la s√©quence de boutons
     * if(this.sequence.length > 0) {
     *   this.playSequence();
     * }
     */
    playSequence(): void;
    /**
     * 
     * @param color - Couleur du bouton √† jouer üî¥,üü¢,üîµ,üü°
     * 
     * Jouer un bouton
     * @example
     * // Jouer la s√©quence de boutons
     * this.sequence.forEach((color : string, index : number) => {
     *  setTimeout(() => {
     *   this.playButton(color);
     * }, this.speed * index);
     * });
     * // ...
     * 
     * // Jouer un bouton
     * this.playButton(color);
     * 
     */
    playButton(color: string): void;
    /**
     * 
     * Ajouter un bouton √† la s√©quence ‚è≠Ô∏è
     */
    addNextButton(): void;
    /**
     * 
     * @param button - Couleur du bouton cliqu√©
     * 
     * V√©rifier si le bouton cliqu√© est le bon bouton 
     */
    buttonClicked(button: string): void;
    /**
     * 
     * Afficher le score üëÅÔ∏è
     */
    showScore(): void;
    /**
     * 
     * Affiche le game over et r√©initialise toutes les variables du jeu ‚ò†Ô∏è
     */
    gameOver(): void;
    /**
     * 
     * Afficher le nombre de boutons cliqu√©s 
     */
    showNumberClick(): void;
    /**
     * 
     * Ajuster la vitesse de la s√©quence de boutons 
     * @returns La nouvelle vitesse de la s√©quence de boutons (utiliser pour le setTimeout)
     * @example
     * 
     * if(this.sequence.length > 0) {
     *   //...
     *  let delay = this.adjustSpeed();
     *  setTimeout(() => {
     *      this.init();
     *  }, delay);
     */
    adjustSpeed() : number
    /**
     * 
     * @description Animer le bouton cliqu√© ou jou√© 
     * @param button - Couleur du bouton √† animer
     */
    animateButton(button: string) : void;
    /**
     * 
     * Afficher le score accumul√© üëÅÔ∏è
     */
    showScore() : void;
    /**
     * 
     * Afficher le score final et le nombre de boutons cliqu√©s au total puis r√©initialiser le jeu üèÅ
     */
    finalScore() : void;
    /**
     * 
     * @description - Affucher la modal de fin de jeu 
     * @param Modal - Objet Modal pour afficher la modal
     * 
     */
    restartGame(Modal : Modal) : void;

}

/**
 * 
 * @description Interface pour la modal
 * 
 */
export interface IModal {
    /**
     * 
     * @description Afficher la modal
     */
    _modal: HTMLDivElement;
    /**
     * 
     * @description Contenu de la modal
     */
    _modalContent: HTMLDivElement;
    /**
     * 
     * Ouvrir la modal
     */
    openModal(): void;
    /**
     *
     * Fermer la modal 
     */
    closeModal(): void;
}